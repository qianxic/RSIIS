---
description: 
globs: 
alwaysApply: true
---
以下是每个文件的简要说明：
linuxcuda.mdc: 似乎是为一个名为 srt-model-quantizing 的项目定义的规则，该项目涉及在 Linux 服务器上使用 Nvidia CUDA 或 AMD ROCm 对模型进行量化。它强调了简单性、效率、鲁棒性和文档。
react.mdc: 包含使用 React、Redux 和 TypeScript 进行开发的规则和最佳实践。它提倡函数式组件、Redux Toolkit、类型安全和特定的文件夹结构。
css.mdc: 这看起来是一份非常详细的前端开发指南，重点是 Next.js、Tailwind CSS、DaisyUI 和 TypeScript。它涵盖了组件创建、响应式设计、状态管理、可访问性、测试，以及针对 Next.js、TypeScript、Starknet React、Cairo（可能是智能合约语言）和 Biome（代码格式化/检查工具）的特定规则。
machinelearning.mdc: 为 Python 机器学习工程师/数据科学家角色定义了详细的规则和技术栈。它指定了 Python 版本、依赖管理（Poetry/Rye）、代码格式化（Ruff）、测试（pytest）、Web 框架（FastAPI）、LLM 框架（Langchain）、文档风格等，并提供了全面的编码指南。
fastapi.mdc: 列出了使用 FastAPI 和 Python 3.12 构建后端服务的最佳实践和强制使用的库/框架，如 Pydantic、SQLAlchemy、Alembic、fastapi-users 等，并强调了通用的 Python 编码规范。
vue3api.mdc: 专注于 Vue 3 Composition API 的最佳实践，包括 setup 函数、ref、reactive、computed、watch 等。它还建议了文件夹结构，并提到了 TypeScript、Props/Emits、错误处理和 Vite。
vue3.mdc: 定义了一个高级前端开发者（精通 Vue 3, Nuxt 3, TypeScript, TailwindCSS）的角色设定，强调遵循用户需求、代码可读性、可访问性，并强制使用 Composition API 和 Tailwind CSS。
node.mdc: 为使用 Next.js 14（App Router）、TypeScript 和 Tailwind CSS 生成代码设定了规则。它强调了服务器组件、响应式设计、数据获取策略、元数据 API、图像优化、可访问性以及特定的代码生成语法。

## AI 如何使用这些规则？

这些 `.mdc` 文件（Cursor 规则文件）是提供给像我这样的 AI 编码助手的上下文信息和指令集。当我接收到你的请求时，特别是在你使用 `@rules` 或类似方式明确引用它们时，或者当它们位于项目的工作区 `.cursor/rules` 目录下时，我会：

1.  **读取并理解规则**: 我会解析这些文件的内容，理解其中定义的技术栈、编码风格、项目规范、最佳实践和限制。
2.  **遵循指导**: 在生成代码、分析代码或提供建议时，我会尽力遵循这些规则中定义的所有指令。
3.  **角色扮演**: 如果规则中定义了特定的角色（例如 `machinelearning.mdc` 中的"Python 大师"或 `vue3.mdc` 中的"高级前端开发者"），我会尝试以该角色设定的风格、知识背景和语气进行回应。
4.  **技术栈对齐**: 我会优先使用规则中指定的技术、库和框架（例如 `fastapi.mdc` 中指定的 FastAPI 相关库）。
5.  **约束应用**: 我会遵守规则中的限制，比如避免使用某些模式、强制执行类型提示或文档要求等。

简而言之，这些规则文件帮助我更好地理解你的项目上下文和偏好，从而提供更相关、更一致、更高质量的辅助。

## 全局配置会如何？

将这些规则配置为全局规则（通常在 Cursor 的设置中完成）意味着，**无论你正在处理哪个项目，这些规则都会默认被加载和应用**。

**优点**: 
*   **一致性**: 可以在所有项目中强制执行统一的编码风格和实践。
*   **便捷性**: 无需在每个项目中重复配置相同的规则。

**潜在缺点/注意事项**:
*   **冲突**: 如果某个项目的特定需求与全局规则冲突，可能会导致问题。例如，全局规则要求使用 Vue 3，但你正在处理一个 React 项目。
*   **覆盖**: 项目本地的 `.cursor/rules` 文件通常会覆盖全局规则（如果存在同名规则文件，本地优先；如果只有全局规则，则应用全局规则）。你需要了解这种优先级关系。
*   **不适用性**: 某些全局规则可能对特定项目完全不适用，虽然 AI 会尝试遵循，但这可能不是最优的。

因此，全局配置适用于那些你希望在**绝大多数或所有项目**中都遵循的通用编码标准或个人偏好。对于项目特定的技术栈和规范，还是建议使用项目本地的 `.cursor/rules` 文件。